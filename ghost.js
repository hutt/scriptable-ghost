// Variables used by Scriptable.
// These must be at the very top of the file. Do not edit.
// icon-color: purple; icon-glyph: columns;
// ===============================
// Scriptable Widget for Ghost CMS
// by Jannis Hutt
// get the latest version here: https://github.com/hutt/scriptable-ghost/
// ===============================

const crypto = importModule('crypto-min.js');

// === Configuration ===
let baseUrl = "https://ghost.example.com";
let adminApiKey = "your admin api key";
let cacheDuration = 24 * 60 * 60 * 1000; // cache data for 24 hours

// == Ghost Logos (base64 encoded) ==
const logoImgBlack = ``;
const logoImgWhite = ``;

// == crypto.js ==
// minimized and reduced version of crypto.js that only includes HmacSHA256, enc.Base64 & enc.Hex
const crypto = !function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.crypto=e():t.crypto=e()}(this,(()=>(()=>{var t={237:(t,e,n)=>{const r={HmacSHA256:n(793),enc:{Base64:n(754),Hex:n(956)}};"undefined"!=typeof window&&(window.crypto=r),t.exports=r},21:function(t,e,n){var r;t.exports=(r=r||function(t){var e;if("undefined"!=typeof window&&window.crypto&&(e=window.crypto),"undefined"!=typeof self&&self.crypto&&(e=self.crypto),"undefined"!=typeof globalThis&&globalThis.crypto&&(e=globalThis.crypto),!e&&"undefined"!=typeof window&&window.msCrypto&&(e=window.msCrypto),!e&&void 0!==n.g&&n.g.crypto&&(e=n.g.crypto),!e)try{e=n(477)}catch(t){}var r=function(){if(e){if("function"==typeof e.getRandomValues)try{return e.getRandomValues(new Uint32Array(1))[0]}catch(t){}if("function"==typeof e.randomBytes)try{return e.randomBytes(4).readInt32LE()}catch(t){}}throw new Error("Native crypto module could not be used to get secure random number.")},i=Object.create||function(){function t(){}return function(e){var n;return t.prototype=e,n=new t,t.prototype=null,n}}(),o={},s=o.lib={},a=s.Base={extend:function(t){var e=i(this);return t&&e.mixIn(t),e.hasOwnProperty("init")&&this.init!==e.init||(e.init=function(){e.$super.init.apply(this,arguments)}),e.init.prototype=e,e.$super=this,e},create:function(){var t=this.extend();return t.init.apply(t,arguments),t},init:function(){},mixIn:function(t){for(var e in t)t.hasOwnProperty(e)&&(this[e]=t[e]);t.hasOwnProperty("toString")&&(this.toString=t.toString)},clone:function(){return this.init.prototype.extend(this)}},c=s.WordArray=a.extend({init:function(t,e){t=this.words=t||[],this.sigBytes=null!=e?e:4*t.length},toString:function(t){return(t||u).stringify(this)},concat:function(t){var e=this.words,n=t.words,r=this.sigBytes,i=t.sigBytes;if(this.clamp(),r%4)for(var o=0;o<i;o++){var s=n[o>>>2]>>>24-o%4*8&255;e[r+o>>>2]|=s<<24-(r+o)%4*8}else for(var a=0;a<i;a+=4)e[r+a>>>2]=n[a>>>2];return this.sigBytes+=i,this},clamp:function(){var e=this.words,n=this.sigBytes;e[n>>>2]&=4294967295<<32-n%4*8,e.length=t.ceil(n/4)},clone:function(){var t=a.clone.call(this);return t.words=this.words.slice(0),t},random:function(t){for(var e=[],n=0;n<t;n+=4)e.push(r());return new c.init(e,t)}}),f=o.enc={},u=f.Hex={stringify:function(t){for(var e=t.words,n=t.sigBytes,r=[],i=0;i<n;i++){var o=e[i>>>2]>>>24-i%4*8&255;r.push((o>>>4).toString(16)),r.push((15&o).toString(16))}return r.join("")},parse:function(t){for(var e=t.length,n=[],r=0;r<e;r+=2)n[r>>>3]|=parseInt(t.substr(r,2),16)<<24-r%8*4;return new c.init(n,e/2)}},h=f.Latin1={stringify:function(t){for(var e=t.words,n=t.sigBytes,r=[],i=0;i<n;i++){var o=e[i>>>2]>>>24-i%4*8&255;r.push(String.fromCharCode(o))}return r.join("")},parse:function(t){for(var e=t.length,n=[],r=0;r<e;r++)n[r>>>2]|=(255&t.charCodeAt(r))<<24-r%4*8;return new c.init(n,e)}},p=f.Utf8={stringify:function(t){try{return decodeURIComponent(escape(h.stringify(t)))}catch(t){throw new Error("Malformed UTF-8 data")}},parse:function(t){return h.parse(unescape(encodeURIComponent(t)))}},d=s.BufferedBlockAlgorithm=a.extend({reset:function(){this._data=new c.init,this._nDataBytes=0},_append:function(t){"string"==typeof t&&(t=p.parse(t)),this._data.concat(t),this._nDataBytes+=t.sigBytes},_process:function(e){var n,r=this._data,i=r.words,o=r.sigBytes,s=this.blockSize,a=o/(4*s),f=(a=e?t.ceil(a):t.max((0|a)-this._minBufferSize,0))*s,u=t.min(4*f,o);if(f){for(var h=0;h<f;h+=s)this._doProcessBlock(i,h);n=i.splice(0,f),r.sigBytes-=u}return new c.init(n,u)},clone:function(){var t=a.clone.call(this);return t._data=this._data.clone(),t},_minBufferSize:0}),l=(s.Hasher=d.extend({cfg:a.extend(),init:function(t){this.cfg=this.cfg.extend(t),this.reset()},reset:function(){d.reset.call(this),this._doReset()},update:function(t){return this._append(t),this._process(),this},finalize:function(t){return t&&this._append(t),this._doFinalize()},blockSize:16,_createHelper:function(t){return function(e,n){return new t.init(n).finalize(e)}},_createHmacHelper:function(t){return function(e,n){return new l.HMAC.init(t,n).finalize(e)}}}),o.algo={});return o}(Math),r)},754:function(t,e,n){var r,i,o;t.exports=(r=n(21),o=(i=r).lib.WordArray,i.enc.Base64={stringify:function(t){var e=t.words,n=t.sigBytes,r=this._map;t.clamp();for(var i=[],o=0;o<n;o+=3)for(var s=(e[o>>>2]>>>24-o%4*8&255)<<16|(e[o+1>>>2]>>>24-(o+1)%4*8&255)<<8|e[o+2>>>2]>>>24-(o+2)%4*8&255,a=0;a<4&&o+.75*a<n;a++)i.push(r.charAt(s>>>6*(3-a)&63));var c=r.charAt(64);if(c)for(;i.length%4;)i.push(c);return i.join("")},parse:function(t){var e=t.length,n=this._map,r=this._reverseMap;if(!r){r=this._reverseMap=[];for(var i=0;i<n.length;i++)r[n.charCodeAt(i)]=i}var s=n.charAt(64);if(s){var a=t.indexOf(s);-1!==a&&(e=a)}return function(t,e,n){for(var r=[],i=0,s=0;s<e;s++)if(s%4){var a=n[t.charCodeAt(s-1)]<<s%4*2|n[t.charCodeAt(s)]>>>6-s%4*2;r[i>>>2]|=a<<24-i%4*8,i++}return o.create(r,i)}(t,e,r)},_map:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="},r.enc.Base64)},956:function(t,e,n){t.exports=n(21).enc.Hex},793:function(t,e,n){var r;t.exports=(r=n(21),n(9),n(25),r.HmacSHA256)},25:function(t,e,n){var r,i,o;t.exports=(i=(r=n(21)).lib.Base,o=r.enc.Utf8,void(r.algo.HMAC=i.extend({init:function(t,e){t=this._hasher=new t.init,"string"==typeof e&&(e=o.parse(e));var n=t.blockSize,r=4*n;e.sigBytes>r&&(e=t.finalize(e)),e.clamp();for(var i=this._oKey=e.clone(),s=this._iKey=e.clone(),a=i.words,c=s.words,f=0;f<n;f++)a[f]^=1549556828,c[f]^=909522486;i.sigBytes=s.sigBytes=r,this.reset()},reset:function(){var t=this._hasher;t.reset(),t.update(this._iKey)},update:function(t){return this._hasher.update(t),this},finalize:function(t){var e=this._hasher,n=e.finalize(t);return e.reset(),e.finalize(this._oKey.clone().concat(n))}})))},9:function(t,e,n){var r;t.exports=(r=n(21),function(t){var e=r,n=e.lib,i=n.WordArray,o=n.Hasher,s=e.algo,a=[],c=[];!function(){function e(e){for(var n=t.sqrt(e),r=2;r<=n;r++)if(!(e%r))return!1;return!0}function n(t){return 4294967296*(t-(0|t))|0}for(var r=2,i=0;i<64;)e(r)&&(i<8&&(a[i]=n(t.pow(r,.5))),c[i]=n(t.pow(r,1/3)),i++),r++}();var f=[],u=s.SHA256=o.extend({_doReset:function(){this._hash=new i.init(a.slice(0))},_doProcessBlock:function(t,e){for(var n=this._hash.words,r=n[0],i=n[1],o=n[2],s=n[3],a=n[4],u=n[5],h=n[6],p=n[7],d=0;d<64;d++){if(d<16)f[d]=0|t[e+d];else{var l=f[d-15],y=(l<<25|l>>>7)^(l<<14|l>>>18)^l>>>3,v=f[d-2],g=(v<<15|v>>>17)^(v<<13|v>>>19)^v>>>10;f[d]=y+f[d-7]+g+f[d-16]}var w=r&i^r&o^i&o,_=(r<<30|r>>>2)^(r<<19|r>>>13)^(r<<10|r>>>22),m=p+((a<<26|a>>>6)^(a<<21|a>>>11)^(a<<7|a>>>25))+(a&u^~a&h)+c[d]+f[d];p=h,h=u,u=a,a=s+m|0,s=o,o=i,i=r,r=m+(_+w)|0}n[0]=n[0]+r|0,n[1]=n[1]+i|0,n[2]=n[2]+o|0,n[3]=n[3]+s|0,n[4]=n[4]+a|0,n[5]=n[5]+u|0,n[6]=n[6]+h|0,n[7]=n[7]+p|0},_doFinalize:function(){var e=this._data,n=e.words,r=8*this._nDataBytes,i=8*e.sigBytes;return n[i>>>5]|=128<<24-i%32,n[14+(i+64>>>9<<4)]=t.floor(r/4294967296),n[15+(i+64>>>9<<4)]=r,e.sigBytes=4*n.length,this._process(),this._hash},clone:function(){var t=o.clone.call(this);return t._hash=this._hash.clone(),t}});e.SHA256=o._createHelper(u),e.HmacSHA256=o._createHmacHelper(u)}(Math),r.SHA256)},477:()=>{}},e={};function n(r){var i=e[r];if(void 0!==i)return i.exports;var o=e[r]={exports:{}};return t[r].call(o.exports,o,o.exports,n),o.exports}return n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n(237)})()));

// === File Management ===
// Get domain name for cache file naming
const domainName = baseUrl.replace(/^https?:\/\//, "").split("/")[0];
const cacheFileName = `${domainName}.json`;

// FileManager setup for iCloud and local storage
const fm = FileManager.iCloud(); // Initialize FileManager
const dirPath = fm.joinPath(fm.documentsDirectory(), "ghost-data");
if (!fm.fileExists(dirPath)) fm.createDirectory(dirPath);
const cachePath = fm.joinPath(dirPath, cacheFileName);

// === Parameter Parsing ===
// Function to parse widget parameters provided by the user
if (args.widgetParameter) {
  // Split the parameters by commas and trim any extra whitespace
  const paramArray = args.widgetParameter.split(",").map(param => param.trim());
  const paramMap = {};
  
  // Iterate through the parameters
  paramArray.forEach(param => {
    // Split the parameter into key-value pairs if in "key=value" format
    const [key, value] = param.includes('=') ? param.split('=') : [];
    if (key && value) {
      // Add the key-value pair to the paramMap object
      paramMap[key.trim()] = value.trim();
    } else {
      // If the parameter is not in key=value format, assume it's positional
      // Assign to baseUrl, adminApiKey, or cacheDuration in that order
      if (!paramMap.baseUrl) paramMap.baseUrl = param;
      else if (!paramMap.adminApiKey) paramMap.adminApiKey = param;
      else if (!paramMap.cacheDuration) paramMap.cacheDuration = param;
    }
  });
  
  // Ensure that both baseUrl and adminApiKey are provided together, if specified
  if ((paramMap.baseUrl && !paramMap.adminApiKey) || (!paramMap.baseUrl && paramMap.adminApiKey)) {
    console.error("Both baseUrl and adminApiKey must be provided if one is specified.");
  } else {
    // If parameters are valid, override the defaults with provided values
    if (paramMap.baseUrl) baseUrl = paramMap.baseUrl;
    if (paramMap.adminApiKey) adminApiKey = paramMap.adminApiKey;
    if (paramMap.cacheDuration) cacheDuration = parseInt(paramMap.cacheDuration) * 60 * 1000; // Convert minutes to milliseconds
  }
}

// === Utility Functions ===
// Function to create a JWT token for authenticating API requests to Ghost
// This uses the adminApiKey, which is expected to be in the format of id:secret
function createJwt() {
  // Split the adminApiKey into the id and secret components
  const [id, secret] = adminApiKey.split(':');
  
  // Define the JWT header with algorithm and type information
  const header = {
    "alg": "HS256", // Specify the algorithm (HMAC SHA-256)
    "typ": "JWT", // Type of the token, which is JWT
    "kid": id // Key ID (the admin API key ID)
  };
  
  // Define the payload with issued time (iat), expiration time (exp), and audience (aud)
  const payload = {
    "iat": Math.floor(Date.now() / 1000), // Issued at current time (in seconds)
    "exp": Math.floor(Date.now() / 1000) + (60 * 60), // Expiration time (1 hour from now)
    "aud": "/v3/admin/" // Audience: The API endpoint for admin access
  };
  
  // Function to encode data to Base64 URL-safe format
  function base64url(source) {
    return btoa(JSON.stringify(source))
      .replace(/=/g, '') // Remove any '=' padding
      .replace(/\+/g, '-') // Replace '+' with '-'
      .replace(/\//g, '_'); // Replace '/' with '_'
  }
  
  // Create the encoded header and payload
  const encodedHeader = base64url(header);
  const encodedPayload = base64url(payload);
  
  // Parse the secret (which is in hexadecimal) using crypto
  const key = crypto.enc.Hex.parse(secret);
  
  // Create the signature by hashing the header and payload with the secret key
  const signature = crypto.enc.Base64.stringify(crypto.HmacSHA256(`${encodedHeader}.${encodedPayload}`, key))
    .replace(/=/g, '') // Remove '=' padding
    .replace(/\+/g, '-') // Replace '+' with '-'
    .replace(/\//g, '_'); // Replace '/' with '_'
  
  // Return the complete JWT token in the format: header.payload.signature
  return `${encodedHeader}.${encodedPayload}.${signature}`;
}
// Save members data to a local cache file for future use
// This function writes the members data along with the current timestamp to the cache
function saveCache(membersData) {
  // Prepare the cache object with the current timestamp and members data
  const cacheData = {
    lastUpdated: Date.now(),
    members: membersData
  };
  
  // Write the cache object to the cache file as a JSON string
  fm.writeString(cachePath, JSON.stringify(cacheData));
  
  // Log success message for debugging purposes
  console.log("Cache saved successfully.");
}

// Load cached data from the local file if it exists and is still valid
// This function checks if the cache is valid, and if so, returns the cached members data
function loadCache() {
  // Check if the cache file exists
  if (fm.fileExists(cachePath)) {
    // Read the cache file and parse the JSON data
    const cache = JSON.parse(fm.readString(cachePath));
    
    // Check if the cache is still valid based on the current time and cache duration
    const isCacheValid = (Date.now() - cache.lastUpdated) < cacheDuration;
    
    if (isCacheValid) {
      // If the cache is valid, return the cached members data
      console.log("Using cached data.");
      return cache.members;
    } else {
      // Log a message if the cache has expired
      console.log("Cache expired.");
    }
  } else {
    // Log a message if no cache file exists
    console.log("No cache found.");
  }
  // Return null if no valid cache is found
  return null;
}

// Function to fetch members' data from the Ghost API using pagination
// Takes in an optional page number, which defaults to 1
async function fetchMembers(page = 1) {
  // Construct the API URL for the specific page of members
  const apiUrl = `${baseUrl}/ghost/api/v3/admin/members/?page=${page}`;
  
  // Create a JWT token for authorization
  const token = createJwt();
  
  // Set up the request object
  let req = new Request(apiUrl);
  req.method = "GET"; // Use the GET method to retrieve data
  req.headers = {
    "Authorization": `Ghost ${token}`, // Include the JWT token in the Authorization header
    "Content-Type": "application/json", // Content type is JSON
    "Origin": `${baseUrl}/ghost/api/admin/` // Set the correct origin header for the request
  };
  
  // Try to fetch the JSON data from the API
  try {
    const jsonData = await req.loadJSON(); // Load the JSON response
    return jsonData; // Return the data if successful
  } catch (error) {
    // Log an error if fetching fails
    console.error("Error fetching members:", error);
    return null; // Return null in case of failure
  }
}

// Recursive function to fetch all members using pagination
// Combines all pages of member data into one array
async function getAllMembers() {
  let allMembers = []; // Initialize an empty array to store all members
  let page = 1; // Start from the first page
  let hasMorePages = true; // Flag to check if there are more pages to fetch
  
  // Continue fetching data while there are more pages
  while (hasMorePages) {
    // Fetch members for the current page
    const data = await fetchMembers(page);
    
    // If data is received and contains members
    if (data && data.members) {
      allMembers = allMembers.concat(data.members); // Add the members to the array
      
      // Check if there is a next page in the pagination
      hasMorePages = data.meta.pagination.next !== null;
      page++; // Move to the next page
    } else {
      hasMorePages = false; // No more pages to fetch
    }
  }
  
  return allMembers; // Return the complete list of members
}

// Main function to get subscriber data with caching support
async function getSubscriberData() {
  // Attempt to load cached data
  const cachedData = loadCache();
  
  // If valid cached data is found, use it
  if (cachedData) {
    return cachedData;
  }
  
  // If no valid cache, fetch all members data from the API
  const members = await getAllMembers();
  
  // If members are found, save them to the cache
  if (members.length > 0) {
    saveCache(members);
  } else {
    // Log an error if no members are found
    console.error("No members found.");
  }
  
  // Return the members data
  return members;
}

async function getMembersCountData(days = 30) {
  // Attempt to load cached data
  const members = await getSubscriberData();
  
  // Sort the members by their created_at date in ascending order
  members.sort((a, b) => new Date(a.created_at) - new Date(b.created_at));
  
  // Get today's date and initialize the counts for the last X days
  const today = new Date();
  const membersCountData = new Array(days).fill(0);
  let memberIndex = 0;
  
  for (let i = days - 1; i >= 0; i--) {
    const date = new Date(today);
    date.setDate(today.getDate() - i);
    const dayEnd = new Date(date);
    dayEnd.setHours(23, 59, 59, 999);
    
    // Count members created on or before this day
    while (memberIndex < members.length && new Date(members[memberIndex].created_at) <= dayEnd) {
      membersCountData[days - 1 - i]++;
      memberIndex++;
    }
  }
  
  // Accumulate member counts progressively
  for (let i = 1; i < days; i++) {
    membersCountData[i] += membersCountData[i - 1];
  }
  
  return membersCountData;
}

// === Error Widget ===
// Function to create an error widget in case of failures
// Displays the error title and message with the same styling as the main widget
function createErrorWidget(title, errorMessage) {
  const widget = new ListWidget(); // Create a new ListWidget
  const isDarkMode = Device.isUsingDarkAppearance(); // Check if dark mode is active
  
  // Set the background color based on light/dark mode
  widget.backgroundColor = isDarkMode ? new Color("#15171a") : new Color("#FFFFFF");
  
  // Add title to the widget
  const titleText = widget.addText(title);
  titleText.font = Font.subheadline();
  titleText.textColor = isDarkMode ? new Color("#FFFFFF") : new Color("#000000");
  
  widget.addSpacer(5); // Add some space between the title and the error message
  
  // Add error message to the widget
  const errorText = widget.addText(errorMessage);
  errorText.font = Font.body();
  errorText.textColor = isDarkMode ? new Color("#FFFFFF") : new Color("#000000");
  
  widget.addSpacer(); // Add remaining space
  
  // Add the logo to the bottom right corner
  const logoStack = widget.addStack();
  logoStack.addSpacer(); // Spacer to push logo to the right
  
  const logoImg = isDarkMode ? logoImgWhite : logoImgBlack;
  
  const logo = logoStack.addImage(Image.fromData(Data.fromBase64String(logoImg)));
  logo.imageSize = new Size(60, 60); // Set the logo size
  logo.rightAlignImage(); // Align the logo to the right
  
  return widget; // Return the error widget
}

// === Draw Graph ===
// Function to draw a graph with rounded curves and non-transparent top line
function drawGraph(context, data, width, height) {
  const minY = Math.min(...data); // Find the minimum value in the data set
  const maxY = Math.max(...data); // Find the maximum value in the data set
  const scaleX = width / (data.length - 1); // Scale horizontally based on data points
  const scaleY = (height * 0.5) / (maxY - minY); // Scale vertically to fit 50% of the widget height
  
  const path = new Path();
  path.move(new Point(0, height - (data[0] - minY) * scaleY)); // Start path at the first data point
  
  // Loop through data to create a smooth curve using Bezier curves
  for (let i = 1; i < data.length; i++) {
    const x = i * scaleX;
    const y = height - (data[i] - minY) * scaleY;
    const prevX = (i - 1) * scaleX;
    const prevY = height - (data[i - 1] - minY) * scaleY;
    
    const ctrl1X = prevX + scaleX / 3;
    const ctrl1Y = prevY;
    const ctrl2X = x - scaleX / 3;
    const ctrl2Y = y;
    
    path.addCurve(new Point(x, y), new Point(ctrl1X, ctrl1Y), new Point(ctrl2X, ctrl2Y)); // Add Bezier curve
  }
  
  // Close the path at the bottom and left of the graph
  path.addLine(new Point(width, height));
  path.addLine(new Point(0, height));
  path.closeSubpath();
  
  // Fill the area under the curve with semi-transparent color
  context.setFillColor(new Color("#FF5BFA", 0.3)); // 30% transparency
  context.addPath(path);
  context.fillPath();
  
  // Add the top line of the graph without transparency
  const topPath = new Path();
  topPath.move(new Point(0, height - (data[0] - minY) * scaleY));
  
  // Loop to draw the non-transparent top line
  for (let i = 1; i < data.length; i++) {
    const x = i * scaleX;
    const y = height - (data[i] - minY) * scaleY;
    const prevX = (i - 1) * scaleX;
    const prevY = height - (data[i - 1] - minY) * scaleY;
    
    const ctrl1X = prevX + scaleX / 3;
    const ctrl1Y = prevY;
    const ctrl2X = x - scaleX / 3;
    const ctrl2Y = y;
    
    topPath.addCurve(new Point(x, y), new Point(ctrl1X, ctrl1Y), new Point(ctrl2X, ctrl2Y)); // Add Bezier curve for top line
  }
  
  // Draw the top line with solid color
  context.setStrokeColor(new Color("#FF5BFA"));
  context.setLineWidth(2);
  context.addPath(topPath);
  context.strokePath(); // Draw the stroke path for the top line
}

// === Small Members Count Widget ===
// Function to create the small widget layout with the total members count
function createSmallMembersWidget(currentSubscribers) {
  const widget = new ListWidget();
  const isDarkMode = Device.isUsingDarkAppearance();
  widget.backgroundColor = isDarkMode ? new Color("#15171a") : new Color("#FFFFFF");
  
  // Create the vertical layout for text and logo
  const mainStack = widget.addStack();
  mainStack.layoutVertically();
  mainStack.topAlignContent();
  mainStack.setPadding(2, 2, 0, 0);
  
  // Title (Total members)
  const title = mainStack.addText("Total members");
  title.font = Font.subheadline();
  title.textColor = isDarkMode ? new Color("#FFFFFF") : new Color("#000000");
  title.leftAlignText();
  
  mainStack.addSpacer(2);
  
  // Subscriber Count
  const subscriberCount = mainStack.addText(`${currentSubscribers}`);
  subscriberCount.font = Font.boldSystemFont(40);
  subscriberCount.minimumScaleFactor = 0.5;
  subscriberCount.textColor = isDarkMode ? new Color("#FFFFFF") : new Color("#000000");
  subscriberCount.leftAlignText();
  
  mainStack.addSpacer();
  
  // Logo section in the bottom right
  const logoStack = mainStack.addStack();
  logoStack.addSpacer(); // Push the logo to the right
  const logo = logoStack.addImage(isDarkMode ? Image.fromData(Data.fromBase64String(logoImgWhite)) : Image.fromData(Data.fromBase64String(logoImgBlack)));
  logo.imageSize = new Size(45, 45);
  logo.rightAlignImage();
  
  return widget;
}

// === Medium Members Count Widget ===
// Function to create the medium widget layout with total members count and graph
function createMediumMembersWidget(currentSubscribers, data) {
  const widget = new ListWidget();
  const isDarkMode = Device.isUsingDarkAppearance();
  widget.backgroundColor = isDarkMode ? new Color("#15171a") : new Color("#FFFFFF");
  
  // Set widget dimensions and prepare context
  const widgetSize = new Size(400, 200);
  const context = new DrawContext();
  context.size = widgetSize;
  context.opaque = false;
  context.respectScreenScale = true;
  
  // Draw the graph as the background
  drawGraph(context, data, widgetSize.width, widgetSize.height);
  const img = context.getImage();
  widget.backgroundImage = img;
  
  // Create the vertical layout for text and logo
  const mainStack = widget.addStack();
  mainStack.layoutVertically();
  mainStack.topAlignContent();
  mainStack.setPadding(2, 2, 0, 0);
  
  // Title
  const title = mainStack.addText("Total members");
  title.font = Font.subheadline();
  title.textColor = isDarkMode ? new Color("#FFFFFF") : new Color("#000000");
  title.leftAlignText();
  
  mainStack.addSpacer(2);
  
  // Subscriber Count
  const subscriberCount = mainStack.addText(`${currentSubscribers}`);
  subscriberCount.font = Font.boldSystemFont(40);
  subscriberCount.minimumScaleFactor = 0.5;
  subscriberCount.textColor = isDarkMode ? new Color("#FFFFFF") : new Color("#000000");
  subscriberCount.leftAlignText();
  
  // Spacer and logo at the bottom right
  mainStack.addSpacer();
  
  const logoStack = mainStack.addStack();
  logoStack.addSpacer(); // Push the logo to the right
  const logo = logoStack.addImage(isDarkMode ? Image.fromData(Data.fromBase64String(logoImgWhite)) : Image.fromData(Data.fromBase64String(logoImgBlack)));
  logo.imageSize = new Size(45, 45);
  logo.rightAlignImage();
  
  return widget;
}

// === Large Members Count Widget ===
// Function to create the large widget layout with total members count and graph
function createLargeMembersWidget(currentSubscribers, data) {
  const widget = new ListWidget();
  const isDarkMode = Device.isUsingDarkAppearance();
  widget.backgroundColor = isDarkMode ? new Color("#15171a") : new Color("#FFFFFF");
  
  // Set widget dimensions and prepare context
  const widgetSize = new Size(400, 400);
  const context = new DrawContext();
  context.size = widgetSize;
  context.opaque = false;
  context.respectScreenScale = true;
  
  // Draw the graph as the background
  drawGraph(context, data, widgetSize.width, widgetSize.height);
  const img = context.getImage();
  widget.backgroundImage = img;
  
  // Create the vertical layout for text and logo
  const mainStack = widget.addStack();
  mainStack.layoutVertically();
  mainStack.topAlignContent();
  mainStack.setPadding(2, 2, 0, 0);
  
  // Title
  const title = mainStack.addText("Total members");
  title.font = Font.subheadline();
  title.textColor = isDarkMode ? new Color("#FFFFFF") : new Color("#000000");
  title.leftAlignText();
  
  mainStack.addSpacer(2);
  
  // Subscriber Count
  const subscriberCount = mainStack.addText(`${currentSubscribers}`);
  subscriberCount.font = Font.boldSystemFont(50);
  subscriberCount.minimumScaleFactor = 0.5;
  subscriberCount.textColor = isDarkMode ? new Color("#FFFFFF") : new Color("#000000");
  subscriberCount.leftAlignText();
  
  // Spacer and logo at the bottom right
  mainStack.addSpacer();
  
  const logoStack = mainStack.addStack();
  logoStack.addSpacer(); // Push the logo to the right
  const logo = logoStack.addImage(isDarkMode ? Image.fromData(Data.fromBase64String(logoImgWhite)) : Image.fromData(Data.fromBase64String(logoImgBlack)));
  logo.imageSize = new Size(45, 45);
  logo.rightAlignImage();
  
  return widget;
}

// === Widget Display ===
// Function to determine widget size and display the appropriate layout
async function createWidget() {
  // get number of total members
  const subscribers = await getSubscriberData();
  const currentSubscribers = subscribers.length;
  
  // get members count for the last 30 days
  const data = await getMembersCountData(30);
  console.log(`Array with members count: ${data}`);
  
  let widgetSize = config.widgetFamily || "medium"; // Use widget size or default to medium
  
  console.log(`Widget Size: ${widgetSize}`); // Log for debugging
  console.log(`Current Base URL: ${baseUrl}`); // Log the current base URL
  
  let widget;
  try {
    // Choose widget layout based on size
    switch (widgetSize) {
      case 'small':
        widget = createSmallMembersWidget(currentSubscribers);
        break;
      case 'medium':
        widget = createMediumMembersWidget(currentSubscribers, data);
        break;
      case 'large':
        widget = createLargeMembersWidget(currentSubscribers, data);
        break;
      default:
        console.error(`Unknown widget size: ${widgetSize}`);
        widget = createErrorWidget("Error", "Unsupported widget size.");
    }
  } catch (error) {
    // Catch errors and display an error widget
    console.error(`Error creating widget: ${error}`);
    widget = createErrorWidget("Error", error.toString());
  }
  
  return widget;
}

// === Main ===
let widget = await createWidget();
if (config.runsInWidget) {
  Script.setWidget(widget);
} else {
  widget.presentMedium();
}
Script.complete();
